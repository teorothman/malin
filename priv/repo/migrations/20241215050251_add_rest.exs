defmodule Malin.Repo.Migrations.AddRest do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # Create schemas if they don't exist
    execute "CREATE SCHEMA IF NOT EXISTS posts"
    execute "CREATE SCHEMA IF NOT EXISTS categories"

    # Now create the tables within the schemas

    # Create the tags table within the categories schema
    create table(:tags, primary_key: false, prefix: "categories") do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
    end

    # Create the post_tags table within the categories schema
    create table(:post_tags, primary_key: false, prefix: "categories") do
      add :post_id, :uuid, null: false, primary_key: true
      add :tag_id, :uuid, null: false, primary_key: true
    end

    # Create the posts table within the posts schema
    create table(:posts, primary_key: false, prefix: "posts") do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    # Alter the post_tags table to add foreign key constraints
    alter table(:post_tags, prefix: "categories") do
      modify :post_id,
             references(:posts,
               column: :id,
               name: "post_tags_post_id_fkey",
               type: :uuid,
               prefix: "posts",
               on_delete: :delete_all
             )

      modify :tag_id,
             references(:tags,
               column: :id,
               name: "post_tags_tag_id_fkey",
               type: :uuid,
               prefix: "categories",
               on_delete: :delete_all
             )
    end

    # Alter the posts table to add additional fields
    alter table(:posts, prefix: "posts") do
      add :title, :text, null: false
      add :public, :boolean, null: false, default: false
      add :intro, :text, null: false
      add :text, :text, null: false
      add :publish_at, :utc_datetime
      add :state, :text, null: false, default: "draft"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :author_id,
          references(:users,
            column: :id,
            name: "posts_author_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :restrict
          ),
          null: false

      add :category_id, :uuid, null: false
    end

    # Create the comments table within the posts schema
    create table(:comments, primary_key: false, prefix: "posts") do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :text, :text, null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "comments_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :restrict
          ),
          null: false

      add :post_id,
          references(:posts,
            column: :id,
            name: "comments_post_id_fkey",
            type: :uuid,
            prefix: "posts",
            on_delete: :delete_all
          ),
          null: false
    end

    # Create the categories table within the categories schema
    create table(:categories, primary_key: false, prefix: "categories") do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    # Alter the posts table to add a foreign key to categories
    alter table(:posts, prefix: "posts") do
      modify :category_id,
             references(:categories,
               column: :id,
               name: "posts_category_id_fkey",
               type: :uuid,
               prefix: "categories",
               on_delete: :restrict
             )
    end

    # Add additional fields to the categories table
    alter table(:categories, prefix: "categories") do
      add :name, :text, null: false
      add :description, :text
    end

    # Ensure that you handle all schemas you use
    execute "GRANT USAGE ON SCHEMA posts TO postgres"
    execute "GRANT USAGE ON SCHEMA categories TO postgres"
  end

  def down do
    # Reverse the changes made in the up function

    alter table(:categories, prefix: "categories") do
      remove :description
      remove :name
    end

    drop constraint(:posts, "posts_category_id_fkey", prefix: "posts")

    alter table(:posts, prefix: "posts") do
      modify :category_id, :uuid
    end

    drop table(:categories, prefix: "categories")

    drop constraint(:comments, "comments_user_id_fkey", prefix: "posts")

    drop constraint(:comments, "comments_post_id_fkey", prefix: "posts")

    drop table(:comments, prefix: "posts")

    drop constraint(:posts, "posts_author_id_fkey", prefix: "posts")

    alter table(:posts, prefix: "posts") do
      remove :category_id
      remove :author_id
      remove :updated_at
      remove :inserted_at
      remove :state
      remove :publish_at
      remove :text
      remove :intro
      remove :public
      remove :title
    end

    # Drop constraints with the correct prefix
    drop constraint(:post_tags, "post_tags_post_id_fkey", prefix: "categories")
    drop constraint(:post_tags, "post_tags_tag_id_fkey", prefix: "categories")

    alter table(:post_tags, prefix: "categories") do
      modify :tag_id, :uuid
      modify :post_id, :uuid
    end

    drop table(:tags, prefix: "categories")
    drop table(:post_tags, prefix: "categories")
    drop table(:posts, prefix: "posts")
    drop table(:comments, prefix: "posts")
    drop table(:categories, prefix: "categories")

    execute "DROP SCHEMA IF EXISTS posts CASCADE"
    execute "DROP SCHEMA IF EXISTS categories CASCADE"
  end
end
